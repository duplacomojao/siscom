Yan Gurevitz 1610886 e Rodrigo Pereira 1611407
Ex 1:
int main()
{
	if(fork()!=0)
	{
		printf("%d\n", getpid());
		waitpid(-1, NULL, 0);
	}
	else
	{
		printf("%d\n", getpid());
		exit(0);
	}
	return 0;
}
Resultados:
2638
2639
Analise:
O pid do pai saiu primeiro pois a chamada para o print foi feita antes da chamada para o wait. Despois que o wait foi chamado o filho printou seu pid. Despois disso ele saiu com exit e ai o pai encerrou.

Ex 2:
int main()
{
	int val = 1, i;
	if(fork()!=0)
	{
		for(i=0; i<50; i++)
		{
			val++;
			printf("%d\n", val);
		}
		waitpid(-1, NULL, 0);
	}
	else
	{
		for(i=0;i<100;i++)
		{
			val += 2;
			printf("%d\n", val);
		}
		exit(0);
	}
	return 0;
}
Resultados:
2
3
4
5
6
7
8
9
3
10
5
11
7
12
9
13
11
14
13
15
15
16
17
17
19
18
21
19
23
20
25
21
27
22
29
23
31
24
33
25
35
26
37
27
39
28
41
29
43
30
45
31
47
32
49
33
51
34
53
35
55
36
57
37
59
38
61
39
63
40
65
41
67
42
69
43
71
44
73
45
75
46
77
47
79
48
81
49
83
50
85
51
87
89
91
93
95
97
99
101
103
105
107
109
111
113
115
117
119
121
123
125
127
129
131
133
135
137
139
141
143
145
147
149
151
153
155
157
159
161
163
165
167
169
171
173
175
177
179
181
183
185
187
189
191
193
195
197
199
201
Analise: 
Existe concorrencia. A variavel esta sendo inicializada como 1 uma vez no pai e uma no filho e os valores nao sao compartilhados, logo cada programa faz incrementos na sua propria variavel e a printa. Os resultados mostram que algumas iteracoes do pai foram feitas enquanto o filho executava suas primeiras linhas despois que este chegou no for era executada uma iteracao do pai depois uma do filho e assim por diante.

Ex 3:
int main()
{
	int val = 1, i;
	pid_t pid = fork();
	if(pid!=0)
	{
		for(i=0; i<50; i++)
		{
			val++;
			printf("%d\n", val);
		}
		waitpid(-1, NULL, 0);
	}
	else
	{
		pid_t pid2 = fork();
		if(pid2!=0)
		{
			for(i=0;i<100;i++)
			{
				val += 2;
				printf("%d\n", val);
			}
			waitpid(-1, NULL, 0);
		}
		else
		{
			for(i=0; i<150; i++)
			{
				val += 3;
				printf("%d\n", val);
			}
		}
		exit(0);
	}
	return 0;
}
Resultados:
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
3
26
5
27
7
28
9
29
11
30
13
31
15
32
17
33
19
34
21
35
23
36
25
37
27
38
29
39
31
40
33
41
35
42
37
43
39
4
44
41
7
45
43
10
46
45
13
47
47
16
48
49
19
49
51
22
50
53
25
51
55
28
57
31
59
34
61
37
63
40
65
43
67
46
69
49
71
52
73
55
75
58
77
61
79
64
81
67
83
70
85
73
87
76
89
79
91
82
93
85
95
88
97
91
99
94
101
97
103
100
105
103
107
106
109
109
111
112
113
115
115
117
118
119
121
121
124
123
127
125
130
127
133
129
136
131
139
133
142
135
145
137
148
139
151
141
154
143
157
145
160
147
163
149
166
151
169
153
172
155
175
157
178
159
181
161
184
163
187
165
190
167
193
169
196
171
199
173
202
175
205
177
208
179
211
181
214
183
217
185
220
187
223
189
226
191
229
193
232
195
235
197
238
199
241
201
244
247
250
253
256
259
262
265
268
271
274
277
280
283
286
289
292
295
298
301
304
307
310
313
316
319
322
325
328
331
334
337
340
343
346
349
352
355
358
361
364
367
370
373
376
379
382
385
388
391
394
397
400
403
406
409
412
415
418
421
424
427
430
433
436
439
442
445
448
451
Analise:
Existe concorrencia. Novamente a variavel foi inicializada com 1 separadamente em cada instancia e o valor nao foi compartilhado. Novamente ele executa algumas iteracoes do pai enqunato o filho passa por suas linhas iniciais (desta vez demora mais pois o iflho tem mais instrucoes) e fica alternando entre o pai e o filho ate que o neto chega no for e comeca a executar suas iteracoes, alternando entre pai filho e neto nesta ordem.

Ex 4:
int main()
{
	int val = 1, i;
	pid_t pid = fork();
	pid_t pid2 = 0;
	if(pid!=0 )
	{
		pid2 = fork();
		if(pid2!=0)
		{
			for(i=0; i<50; i++)
			{
				val++;
				printf("%d - %d\n",getpid(),  val);
			}
			waitpid(-1, NULL, 0);
		}
		else
		{
			for(i=0; i<150; i++)
			{
				val += 3;
				printf("%d - %d\n",getpid(),  val);
			}
			exit(0);
		}
	}
	else
	{
		for(i=0; i<100; i++)
		{
			val += 2;
			printf("%d - %d\n",getpid(),  val);
		}
		exit(0);
	}
	return 0;
}
Resultados:
3325 - 2
3325 - 3
3325 - 4
3325 - 5
3325 - 6
3325 - 7
3325 - 8
3325 - 9
3325 - 10
3325 - 11
3325 - 12
3325 - 13
3325 - 14
3325 - 15
3325 - 16
3325 - 17
3325 - 18
3325 - 19
3325 - 20
3325 - 21
3325 - 22
3325 - 23
3325 - 24
3325 - 25
3325 - 26
3325 - 27
3325 - 28
3325 - 29
3325 - 30
3325 - 31
3325 - 32
3325 - 33
3325 - 34
3326 - 3
3325 - 35
3325 - 36
3326 - 5
3325 - 37
3326 - 7
3325 - 38
3326 - 9
3325 - 39
3326 - 11
3325 - 40
3326 - 13
3325 - 41
3326 - 15
3325 - 42
3326 - 17
3325 - 43
3326 - 19
3325 - 44
3326 - 21
3325 - 45
3326 - 23
3325 - 46
3326 - 25
3325 - 47
3326 - 27
3325 - 48
3326 - 29
3325 - 49
3326 - 31
3325 - 50
3326 - 33
3325 - 51
3326 - 35
3326 - 37
3326 - 39
3326 - 41
3326 - 43
3326 - 45
3326 - 47
3326 - 49
3326 - 51
3326 - 53
3326 - 55
3326 - 57
3326 - 59
3326 - 61
3326 - 63
3326 - 65
3326 - 67
3326 - 69
3326 - 71
3326 - 73
3326 - 75
3326 - 77
3326 - 79
3326 - 81
3326 - 83
3326 - 85
3326 - 87
3326 - 89
3326 - 91
3326 - 93
3326 - 95
3326 - 97
3326 - 99
3326 - 101
3326 - 103
3326 - 105
3326 - 107
3326 - 109
3326 - 111
3326 - 113
3326 - 115
3326 - 117
3326 - 119
3326 - 121
3326 - 123
3326 - 125
3326 - 127
3326 - 129
3326 - 131
3326 - 133
3326 - 135
3326 - 137
3326 - 139
3326 - 141
3326 - 143
3326 - 145
3326 - 147
3326 - 149
3326 - 151
3326 - 153
3326 - 155
3326 - 157
3326 - 159
3326 - 161
3326 - 163
3326 - 165
3326 - 167
3326 - 169
3326 - 171
3326 - 173
3326 - 175
3326 - 177
3326 - 179
3326 - 181
3326 - 183
3326 - 185
3326 - 187
3326 - 189
3326 - 191
3326 - 193
3326 - 195
3326 - 197
3326 - 199
3326 - 201
3327 - 4
3327 - 7
3327 - 10
3327 - 13
3327 - 16
3327 - 19
3327 - 22
3327 - 25
3327 - 28
3327 - 31
3327 - 34
3327 - 37
3327 - 40
3327 - 43
3327 - 46
3327 - 49
3327 - 52
3327 - 55
3327 - 58
3327 - 61
3327 - 64
3327 - 67
3327 - 70
3327 - 73
3327 - 76
3327 - 79
3327 - 82
3327 - 85
3327 - 88
3327 - 91
3327 - 94
3327 - 97
3327 - 100
3327 - 103
3327 - 106
3327 - 109
3327 - 112
3327 - 115
3327 - 118
3327 - 121
3327 - 124
3327 - 127
3327 - 130
3327 - 133
3327 - 136
3327 - 139
3327 - 142
3327 - 145
3327 - 148
3327 - 151
3327 - 154
3327 - 157
3327 - 160
3327 - 163
3327 - 166
3327 - 169
3327 - 172
3327 - 175
3327 - 178
3327 - 181
3327 - 184
3327 - 187
3327 - 190
3327 - 193
3327 - 196
3327 - 199
3327 - 202
3327 - 205
3327 - 208
3327 - 211
3327 - 214
3327 - 217
3327 - 220
3327 - 223
3327 - 226
3327 - 229
3327 - 232
3327 - 235
3327 - 238
3327 - 241
3327 - 244
3327 - 247
3327 - 250
3327 - 253
3327 - 256
3327 - 259
3327 - 262
3327 - 265
3327 - 268
3327 - 271
3327 - 274
3327 - 277
3327 - 280
3327 - 283
3327 - 286
3327 - 289
3327 - 292
3327 - 295
3327 - 298
3327 - 301
3327 - 304
3327 - 307
3327 - 310
3327 - 313
3327 - 316
3327 - 319
3327 - 322
3327 - 325
3327 - 328
3327 - 331
3327 - 334
3327 - 337
3327 - 340
3327 - 343
3327 - 346
3327 - 349
3327 - 352
3327 - 355
3327 - 358
3327 - 361
3327 - 364
3327 - 367
3327 - 370
3327 - 373
3327 - 376
3327 - 379
3327 - 382
3327 - 385
3327 - 388
3327 - 391
3327 - 394
3327 - 397
3327 - 400
3327 - 403
3327 - 406
3327 - 409
3327 - 412
3327 - 415
3327 - 418
3327 - 421
3327 - 424
3327 - 427
3327 - 430
3327 - 433
3327 - 436
3327 - 439
3327 - 442
3327 - 445
3327 - 448
3327 - 451
Analise:
O Segundo filho a ser criado somente entrou em concorrencia depois que pelo mmenos um dos outros encerrou (quando aumentamos o numero de iteracoes para aumentar o tempo o segundo filho somente comecou depois que o pai encerrou, antes disso o pai e  o primeiro filho ficaram em concorrencia).

